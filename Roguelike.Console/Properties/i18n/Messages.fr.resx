<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ABossArrives" xml:space="preserve">
    <value>Un boss arrive</value>
  </data>
  <data name="ArminFirstMeeting" xml:space="preserve">
    <value>Salutations, voyageur. Sois le bienvenu à Oneheim, ou plutôt, à ce qu’il en reste. Ce village n’est plus qu’un champ de ruines. J’y ai établi un camp et élevé des palissades. Prends garde, car au-dehors, le danger guette à chaque pas.</value>
  </data>
  <data name="ArminMeeting" xml:space="preserve">
    <value>Déjà de retour ? L’extérieur du camp paraît bien rude en ce jour. Que puis-je faire pour toi, ami ?</value>
  </data>
  <data name="ArminMeetingBaseCampUnderAttack" xml:space="preserve">
    <value>Aux armes ! Les ombres ont franchi nos palissades ! Tenez bon, nous ne céderons point !</value>
  </data>
  <data name="ArminMeetingFirstBossComing" xml:space="preserve">
    <value>J’ai ouï de sinistres cris au-dehors, glaçant mon sang dans mes veines. Une créature rôde dans les ombres. Prends garde à toi, voyageur.</value>
  </data>
  <data name="ArminMeetingFirstBossDefeated" xml:space="preserve">
    <value>La rumeur s’est répandue : vous avez terrassé ce monstre abominable. Jamais je n’aurais cru votre force si grande. C’est une bénédiction que de vous compter parmi nous ! Recevez ma gratitude éternelle. Que puis-je faire pour vous témoigner ma reconnaissance ?</value>
  </data>
  <data name="ArminMeetingFirstBossHere" xml:space="preserve">
    <value>Des voyageurs ont confirmé la présence d’un ennemi redoutable rôdant dans ces terres. Si seulement une âme assez vaillante pouvait nous délivrer de ce fléau… Puissent les palissades du camp tenir bon jusque-là.</value>
  </data>
  <data name="ArminMeetingPlayerLowLife" xml:space="preserve">
    <value>Par les dieux, tu sembles à bout de forces ! Repose-toi un instant, ce camp est fait pour offrir un havre aux âmes éreintées.</value>
  </data>
  <data name="ArminMeetingPlayerRich" xml:space="preserve">
    <value>Voilà une bourse bien lourde que tu portes là. Puisse-t-elle servir à relever Oneheim et à bâtir de nouvelles espérances.</value>
  </data>
  <data name="BaseCampHp" xml:space="preserve">
    <value>Etat du camp de base : </value>
  </data>
  <data name="BeCarefullYouAreNotSafeHere" xml:space="preserve">
    <value>Soyez prudent, des ennemis rôdent ...</value>
  </data>
  <data name="CampAlreadyRepair" xml:space="preserve">
    <value>Le camp est déjà réparé.</value>
  </data>
  <data name="CanYouHealMe" xml:space="preserve">
    <value>Pouvez-vous me soigner ?</value>
  </data>
  <data name="CanYouRepairTheCamp" xml:space="preserve">
    <value>Pouvez-vous réparer le camp ?</value>
  </data>
  <data name="GameOverPressEnterToExit" xml:space="preserve">
    <value>Game Over ! Appuyez sur Entrée pour quitter.</value>
  </data>
  <data name="Goodbye" xml:space="preserve">
    <value>Au revoir.</value>
  </data>
  <data name="MaybeLater" xml:space="preserve">
    <value>Peut-être plus tard.</value>
  </data>
  <data name="NeedHealing" xml:space="preserve">
    <value>J'ai besoin de me soigner.</value>
  </data>
  <data name="NoCampToRepair" xml:space="preserve">
    <value>Il n'y a plus de camp à réparer. Tout est détruit.</value>
  </data>
  <data name="NotEnoughGold" xml:space="preserve">
    <value>Vous n'avez pas assez d'or pour ça.</value>
  </data>
  <data name="NothingToRepair" xml:space="preserve">
    <value>Il n'y a rien à réparer.</value>
  </data>
  <data name="PayAndRepair" xml:space="preserve">
    <value>Payer et réparer</value>
  </data>
  <data name="RepairTheCamp" xml:space="preserve">
    <value>Il faudrait réparer le camp.</value>
  </data>
  <data name="StepAndLevel" xml:space="preserve">
    <value>Pas: {0} | Niveau: {1}</value>
  </data>
  <data name="TheCampIsAlreadyFullyRepair" xml:space="preserve">
    <value>Le camp est déjà complètement réparé.</value>
  </data>
  <data name="TheEndPressEnterToExit" xml:space="preserve">
    <value>The End! Appuyez sur Entrée pour quitter.</value>
  </data>
  <data name="TheEnemyDodgedYourAttack" xml:space="preserve">
    <value>L'ennemi a esquivé votre attaque !</value>
  </data>
  <data name="TheFogIntensifies" xml:space="preserve">
    <value>Le brouillard s'épaissit ! De nouveaux ennemis et trésors sont apparus !</value>
  </data>
  <data name="YouDefeatedAllBosses" xml:space="preserve">
    <value>Vous avez vaincu tous les boss.</value>
  </data>
  <data name="YouDodgedTheEnemyAttack" xml:space="preserve">
    <value>Vous avez esquivé l'attaque de votre ennemi !</value>
  </data>
  <data name="YouWereAttackedAndDefeatedYourEnemy" xml:space="preserve">
    <value>Vous avez été attaqué et vous avez vaincu votre ennemi.</value>
  </data>
  <data name="YouWereKilledBy" xml:space="preserve">
    <value>Vous avez été tué par {0}.</value>
  </data>
</root>